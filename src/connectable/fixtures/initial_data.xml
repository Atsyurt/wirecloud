<?xml version="1.0" encoding="utf-8"?>
<django-objects version="1.0">
    <object pk="1" model="connectable.filter">
        <field type="CharField" name="name">concat</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {

        var result;
        if (params["stringBefore"]) {
            result = params["stringBefore"].concat(channelValue);
        } else {
            result = channelValue;
        }

        if (params["stringAfter"]) {
            result = result.concat(params["stringAfter"]);
        }

        return result;
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_concat_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_concat_helptext__</field>
        <field type="TextField" name="params">__MSG_concat_params__</field>
    </object>
    <object pk="2" model="connectable.filter">
        <field type="CharField" name="name">encodeURIComponent</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        return encodeURIComponent(channelValue);
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_encodeURIComponent_label__</field>
        <field type="CharField" name="nature">JSLIB</field>
        <field type="CharField" name="category">TRANS</field>
        <field type="TextField" name="help_text">__MSG_encodeURIComponent_helptext__</field>
        <field type="TextField" name="params"><None></None></field>
    </object>
    <object pk="3" model="connectable.filter">
        <field type="CharField" name="name">decodeURIComponent</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        return decodeURIComponent(channelValue);
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_decodeURIComponent_label__</field>
        <field type="CharField" name="nature">JSLIB</field>
        <field type="CharField" name="category">TRANS</field>
        <field type="TextField" name="help_text">__MSG_decodeURIComponent_helptext__</field>
        <field type="TextField" name="params"><None></None></field>
    </object>
    <object pk="8" model="connectable.filter">
        <field type="CharField" name="name">match</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        var result = channelValue.match(params['regexp']);
        if (result) {
            return Object.toJSON(result);
        } else {
            throw new DontPropagateException("no matches");
        }
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_match_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_match_helptext__</field>
        <field type="TextField" name="params">__MSG_match_params__</field>
    </object>
    <object pk="9" model="connectable.filter">
        <field type="CharField" name="name">replace</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        var newString = (params['newSubStr']) ? params['newSubStr'] : "";
        return channelValue.replace(params['regexp'], newString);
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_replace_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_replace_helptext__</field>
        <field type="TextField" name="params">__MSG_replace_params__</field>
    </object>
    <object pk="12" model="connectable.filter">
        <field type="CharField" name="name">split</field>
        <field type="TextField" name="code"><![CDATA[
    function(channelValue, channel, params) {
        if (params['howmany']) {
            return Object.toJSON(channelValue.split(params['separator'], params['howmany']));
        } else {
            return Object.toJSON(channelValue.split(params['separator']));
        }
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_split_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_split_helptext__</field>
        <field type="TextField" name="params">__MSG_split_params__</field>
    </object>
    <object pk="13" model="connectable.filter">
        <field type="CharField" name="name">substr</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        if (params['length']) {
            return channelValue.substr(params['start'], params['length']);
        } else {
            return channelValue.substr(params['start']);
        }
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_substr_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_substr_helptext__</field>
        <field type="TextField" name="params">__MSG_substr_params__</field>
    </object>
    <object pk="16" model="connectable.filter">
        <field type="CharField" name="name">tolowercase</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        return channelValue.toLowerCase();
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_tolowercase_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_tolowercase_helptext__</field>
        <field type="TextField" name="params"><None></None></field>
    </object>
    <object pk="17" model="connectable.filter">
        <field type="CharField" name="name">touppercase</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        return channelValue.toUpperCase();
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_touppercase_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_touppercase_helptext__</field>
        <field type="TextField" name="params"><None></None></field>
    </object>
    <object pk="18" model="connectable.filter">
        <field type="CharField" name="name">jsonparse</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        var result;
        if (channelValue == "") {
            result = "";
        } else {
            result = JSONParser.parse(channelValue, params['jpExp']);
        }

        if (!result || result === "") {
            throw new DontPropagateException("Not found");
        } else {
            return result;
        }
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_jsonparser_label__</field>
        <field type="CharField" name="nature">JSLIB</field>
        <field type="CharField" name="category">JSON</field>
        <field type="TextField" name="help_text">__MSG_jsonparser_helptext__</field>
        <field type="TextField" name="params">__MSG_jsonparser_params__</field>
   </object>
   <object pk="19" model="connectable.filter">
        <field type="CharField" name="name">barrier</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        if (!channel._allInputsModified()) {
            throw new DontPropagateException("Waiting for inputs");
        } else {
            channel._unmarkAllInputsAsModified();
            if (params["mapping"]) {
                //change the indexes given by the user
                var inputValues = channel._getJSONInput();
                var userIndexes = eval('('+params["mapping"]+')');
                var newInputs = {};
                var newIndex, value = null;
                var indexes = inputValues.keys();
                for (var i = 0; i < indexes.length; i += 1) {
                    value = inputValues[indexes[i]];
                    newIndex = userIndexes[indexes[i]];
                    if (!newIndex) {
                        newIndex = indexes[i];
                    }
                    newInputs[newIndex] = value;
                }
                return Object.toJSON(newInputs);
            }
            return channel._getJSONInput().toJSON();
        }
    }
        ]]></field>
        <field type="CharField" name="label">__MSG_barrier_label__</field>
        <field type="CharField" name="nature">PATT</field>
        <field type="CharField" name="category">TRANS</field>
        <field type="TextField" name="help_text">__MSG_barrier_helptext__</field>
        <field type="TextField" name="params">__MSG_barrier_params__</field>
    </object>
    <object pk="20" model="connectable.filter">
        <field type="CharField" name="name">contains</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        var result = channelValue.match(params['pattern']);
        if (result) {
            return channelValue;
        } else {
            throw new DontPropagateException("No matches");
        }
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_contains_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_contains_helptext__</field>
        <field type="TextField" name="params">__MSG_contains_params__</field>
    </object>
    <object pk="21" model="connectable.filter">
        <field type="CharField" name="name">acumulator</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        if (!channel._allInputsModified()) {
            throw new DontPropagateException("Waiting for inputs");
        } else {
            if (params["mapping"]) {
                //change the indexes given by the user
                var inputValues = channel._getJSONInput();
                var userIndexes = eval('('+params["mapping"]+')');
                var newInputs = {};
                var newIndex, value = null;
                var indexes = inputValues.keys();
                for (var i = 0; i < indexes.length; i += 1) {
                    value = inputValues[indexes[i]];
                    newIndex = userIndexes[indexes[i]];
                    if (!newIndex) {
                        newIndex = indexes[i];
                    }
                    newInputs[newIndex] = value;
                }
                return Object.toJSON(newInputs);
            }
            return channel._getJSONInput().toJSON();
        }
    }
        ]]></field>
        <field type="CharField" name="label">__MSG_accumulator_label__</field>
        <field type="CharField" name="nature">PATT</field>
        <field type="CharField" name="category">TRANS</field>
        <field type="TextField" name="help_text">__MSG_accumulator_helptext__</field>
        <field type="TextField" name="params">__MSG_accumulator_params__</field>
    </object>
</django-objects>
