<?xml version="1.0" encoding="utf-8"?>
<django-objects version="1.0">
    <object pk="1" model="connectable.filter">
        <field type="CharField" name="name">concat</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {

        var result;
        if (params["stringBefore"]) {
            result = params["stringBefore"].concat(channelValue);
        } else {
            result = channelValue;
        }

        if (params["stringAfter"]) {
            result = result.concat(params["stringAfter"]);
        }

        return result;
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_concat_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_concat_helptext__</field>
        <field type="TextField" name="params">__MSG_concat_params__</field>
    </object>
    <object pk="2" model="connectable.filter">
        <field type="CharField" name="name">encodeURIComponent</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        return encodeURIComponent(channelValue);
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_encodeURIComponent_label__</field>
        <field type="CharField" name="nature">JSLIB</field>
        <field type="CharField" name="category">TRANS</field>
        <field type="TextField" name="help_text">__MSG_encodeURIComponent_helptext__</field>
        <field type="TextField" name="params"><None></None></field>
    </object>
    <object pk="3" model="connectable.filter">
        <field type="CharField" name="name">decodeURIComponent</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        return decodeURIComponent(channelValue);
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_decodeURIComponent_label__</field>
        <field type="CharField" name="nature">JSLIB</field>
        <field type="CharField" name="category">TRANS</field>
        <field type="TextField" name="help_text">__MSG_decodeURIComponent_helptext__</field>
        <field type="TextField" name="params"><None></None></field>
    </object>
    <object pk="8" model="connectable.filter">
        <field type="CharField" name="name">match</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        var result = channelValue.match(params['regexp']);
        if (result) {
            return Object.toJSON(result);
        } else {
            throw new DontPropagateException("no matches");
        }
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_match_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_match_helptext__</field>
        <field type="TextField" name="params">__MSG_match_params__</field>
    </object>
    <object pk="9" model="connectable.filter">
        <field type="CharField" name="name">replace</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        var newString = (params['newSubStr']) ? params['newSubStr'] : "";
        return channelValue.replace(params['regexp'], newString);
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_replace_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_replace_helptext__</field>
        <field type="TextField" name="params">__MSG_replace_params__</field>
    </object>
    <object pk="12" model="connectable.filter">
        <field type="CharField" name="name">split</field>
        <field type="TextField" name="code"><![CDATA[
    function(channelValue, channel, params) {
        if (params['howmany']) {
            return Object.toJSON(channelValue.split(params['separator'], params['howmany']));
        } else {
            return Object.toJSON(channelValue.split(params['separator']));
        }
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_split_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_split_helptext__</field>
        <field type="TextField" name="params">__MSG_split_params__</field>
    </object>
    <object pk="13" model="connectable.filter">
        <field type="CharField" name="name">substr</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        if (params['length']) {
            return channelValue.substr(params['start'], params['length']);
        } else {
            return channelValue.substr(params['start']);
        }
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_substr_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_substr_helptext__</field>
        <field type="TextField" name="params">__MSG_substr_params__</field>
    </object>
    <object pk="16" model="connectable.filter">
        <field type="CharField" name="name">tolowercase</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        return channelValue.toLowerCase();
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_tolowercase_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_tolowercase_helptext__</field>
        <field type="TextField" name="params"><None></None></field>
    </object>
    <object pk="17" model="connectable.filter">
        <field type="CharField" name="name">touppercase</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        return channelValue.toUpperCase();
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_touppercase_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_touppercase_helptext__</field>
        <field type="TextField" name="params"><None></None></field>
    </object>
    <object pk="18" model="connectable.filter">
        <field type="CharField" name="name">jsonparse</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        var result;
        if (channelValue == "") {
            result = "";
        } else {
            result = JSONParser.parse(channelValue, params['jpExp']);
        }

        if (!result || result === "") {
            throw new DontPropagateException("Not found");
        } else {
            return result;
        }
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_jsonparser_label__</field>
        <field type="CharField" name="nature">JSLIB</field>
        <field type="CharField" name="category">JSON</field>
        <field type="TextField" name="help_text">__MSG_jsonparser_helptext__</field>
        <field type="TextField" name="params">__MSG_jsonparser_params__</field>
   </object>
   <object pk="19" model="connectable.filter">
        <field type="CharField" name="name">barrier</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        if (!channel._allInputsModified()) {
            throw new DontPropagateException("Waiting for inputs");
        } else {
            channel._unmarkAllInputsAsModified();
            if (params["mapping"]) {
                //change the indexes given by the user
                var inputValues = channel._getJSONInput();
                var userIndexes = eval('('+params["mapping"]+')');
                var newInputs = {};
                var newIndex, value = null;
                var indexes = inputValues.keys();
                for (var i = 0; i < indexes.length; i += 1) {
                    value = inputValues[indexes[i]];
                    newIndex = userIndexes[indexes[i]];
                    if (!newIndex) {
                        newIndex = indexes[i];
                    }
                    newInputs[newIndex] = value;
                }
                return Object.toJSON(newInputs);
            }
            return channel._getJSONInput().toJSON();
        }
    }
        ]]></field>
        <field type="CharField" name="label">__MSG_barrier_label__</field>
        <field type="CharField" name="nature">PATT</field>
        <field type="CharField" name="category">TRANS</field>
        <field type="TextField" name="help_text">__MSG_barrier_helptext__</field>
        <field type="TextField" name="params">__MSG_barrier_params__</field>
    </object>
    <object pk="20" model="connectable.filter">
        <field type="CharField" name="name">contains</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        var result = channelValue.match(params['pattern']);
        if (result) {
            return channelValue;
        } else {
            throw new DontPropagateException("No matches");
        }
    }
        ]]>
        </field>
        <field type="CharField" name="label">__MSG_contains_label__</field>
        <field type="CharField" name="nature">NATIVE</field>
        <field type="CharField" name="category">STR</field>
        <field type="TextField" name="help_text">__MSG_contains_helptext__</field>
        <field type="TextField" name="params">__MSG_contains_params__</field>
    </object>
    <object pk="21" model="connectable.filter">
        <field type="CharField" name="name">acumulator</field>
        <field type="TextField" name="code"><![CDATA[
    function (channelValue, channel, params) {
        if (!channel._allInputsModified()) {
            throw new DontPropagateException("Waiting for inputs");
        } else {
            if (params["mapping"]) {
                //change the indexes given by the user
                var inputValues = channel._getJSONInput();
                var userIndexes = eval('('+params["mapping"]+')');
                var newInputs = {};
                var newIndex, value = null;
                var indexes = inputValues.keys();
                for (var i = 0; i < indexes.length; i += 1) {
                    value = inputValues[indexes[i]];
                    newIndex = userIndexes[indexes[i]];
                    if (!newIndex) {
                        newIndex = indexes[i];
                    }
                    newInputs[newIndex] = value;
                }
                return Object.toJSON(newInputs);
            }
            return channel._getJSONInput().toJSON();
        }
    }
        ]]></field>
        <field type="CharField" name="label">__MSG_accumulator_label__</field>
        <field type="CharField" name="nature">PATT</field>
        <field type="CharField" name="category">TRANS</field>
        <field type="TextField" name="help_text">__MSG_accumulator_helptext__</field>
        <field type="TextField" name="params">__MSG_accumulator_params__</field>
    </object>
    <object pk="1" model="translator.translation">
        <field type="CharField" name="text_id">concat_label</field>
        <field type="IntegerField" name="element_id">1</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Concat [String, String]</field>
    </object>
    <object pk="2" model="translator.translation">
        <field type="CharField" name="text_id">concat_label</field>
        <field type="IntegerField" name="element_id">1</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Concatenar [String, String]</field>
    </object>
    <object pk="3" model="translator.translation">
        <field type="CharField" name="text_id">concat_helptext</field>
        <field type="IntegerField" name="element_id">1</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Concatenates the value of the channel with the value of
the strings given by the user. The user can give both a
"Before" string and an "After" string to be concatenated
before or after the value of the channel.

e.g.
Channel value: 'aaa'
Before (given by user):
After (given by user): 'bbb'
Returns: 'aaabbb'</field>
    </object>
    <object pk="4" model="translator.translation">
        <field type="CharField" name="text_id">concat_helptext</field>
        <field type="IntegerField" name="element_id">1</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Concatena el valor del canal con los fragmentos de texto
proporcionado por el usuario. El usuario puede proporcionar
un texto para concatenar por delante del valor del canal
(parámetro "Antes") y/o un texto para concatenar después
del valor del canal (parámetro "Después").

ejemplo
Valor del canal: 'aaa'
Parámetros:
  Antes: ''
  Después: 'bbb'
Resultado: 'aaabbb'</field>
    </object>
    <object pk="5" model="translator.translation">
        <field type="CharField" name="text_id">concat_params</field>
        <field type="IntegerField" name="element_id">1</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">[{"name": "stringBefore", "type": "S", "index": 0, "label": "Before"}, {"name": "stringAfter", "type": "S", "index": 1, "label": "After"}]</field>
    </object>
    <object pk="6" model="translator.translation">
        <field type="CharField" name="text_id">concat_params</field>
        <field type="IntegerField" name="element_id">1</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">[{"name": "stringBefore", "type": "S", "index": 0, "label": "Antes"}, {"name": "stringAfter", "type": "S", "index": 1, "label": "Después"}]</field>
    </object>
    <object pk="7" model="translator.translation">
        <field type="CharField" name="text_id">encodeURIComponent_label</field>
        <field type="IntegerField" name="element_id">2</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Encode URI Component</field>
    </object>
    <object pk="8" model="translator.translation">
        <field type="CharField" name="text_id">encodeURIComponent_label</field>
        <field type="IntegerField" name="element_id">2</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Codificar componente URI</field>
    </object>
    <object pk="9" model="translator.translation">
        <field type="CharField" name="text_id">encodeURIComponent_helptext</field>
        <field type="IntegerField" name="element_id">2</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Encodes the value of the channel as a valid component of a
universal resource identifier (URI, Uniform Resource
Identifier).

e.g.
Channel value: 'ezweb platform'
Returns: 'ezweb%20platform'</field>
    </object>
    <object pk="10" model="translator.translation">
        <field type="CharField" name="text_id">encodeURIComponent_helptext</field>
        <field type="IntegerField" name="element_id">2</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">
Codifica el valor del canal para su uso como un componente
válido de un identificador de recurso universal (URI,
Uniform Resource Identifier).

ejemplo
Valor del canal: 'ezweb platform'
Valor devuelto: 'ezweb%20platform'</field>
    </object>
    <object pk="11" model="translator.translation">
        <field type="CharField" name="text_id">decodeURIComponent_label</field>
        <field type="IntegerField" name="element_id">3</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Decode URI Component</field>
    </object>
    <object pk="12" model="translator.translation">
        <field type="CharField" name="text_id">decodeURIComponent_label</field>
        <field type="IntegerField" name="element_id">3</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Descodificar componente URI</field>
    </object>
    <object pk="13" model="translator.translation">
        <field type="CharField" name="text_id">decodeURIComponent_helptext</field>
        <field type="IntegerField" name="element_id">3</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">
Treats the value of the channel as a URI (Uniform Resource
Identifier) and decodes it.

e.g.
Channel value: 'ezweb%20platform'
Returns: 'ezweb platform'</field>
    </object>
    <object pk="14" model="translator.translation">
        <field type="CharField" name="text_id">decodeURIComponent_helptext</field>
        <field type="IntegerField" name="element_id">3</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">
Trata el valor del canal como un componente de un
identificador de recurso universal (URI, Uniform Resource
Identifier) y lo devuelve descodificado.

ejemplo
Valor del canal: 'ezweb%20platform'
Valor devuelto: 'ezweb platform'</field>
    </object>
    <object pk="15" model="translator.translation">
        <field type="CharField" name="text_id">match_label</field>
        <field type="IntegerField" name="element_id">8</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Match [Regular Expression]</field>
    </object>
    <object pk="16" model="translator.translation">
        <field type="CharField" name="text_id">match_label</field>
        <field type="IntegerField" name="element_id">8</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Match [Expresión Regular]</field>
    </object>
    <object pk="17" model="translator.translation">
        <field type="CharField" name="text_id">match_helptext</field>
        <field type="IntegerField" name="element_id">8</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value"><![CDATA[Searchs for a specified value in the value
of the channel using <a href="http://www.regular-expressions.info/" target="_blank">regular expressions</a>.
Return a JSON list with the occurrences.
If no occurrence is found the value is NOT propagated.

e.g. Looks up the characters before the first
comma
Channel value: 'Getafe, Madrid'
Regular expresion (given by user): '/[\\w|\\s]*,/'
Returns: ['Getafe,']]]></field>
    </object>
    <object pk="18" model="translator.translation">
        <field type="CharField" name="text_id">match_helptext</field>
        <field type="IntegerField" name="element_id">8</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value"><![CDATA[
Busca en el valor del canal usando <a href="http://www.regular-expressions.info/" target="_blank">expresiones regulares</a>.
Devuelve un Array con los valores capturados.
El valor del canal no se propaga si el patrón de la expresión regular no casa con el valor del canal.

ejemplo: Buscar texto antes de la primera coma
Valor del canal: 'Getafe, Madrid'
Expresión regular: '/[\\w|\\s]*,/'
Valor devuelto: ['Getafe,']]]></field>
    </object>
    <object pk="19" model="translator.translation">
        <field type="CharField" name="text_id">match_params</field>
        <field type="IntegerField" name="element_id">8</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">[{"name": "regexp", "type": "regexp", "index": 0, "required":true, "label": "Regular Expression"}]</field>
    </object>
    <object pk="20" model="translator.translation">
        <field type="CharField" name="text_id">match_params</field>
        <field type="IntegerField" name="element_id">8</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">[{"name": "regexp", "type": "regexp", "index": 0, "required":true, "label": "Expresión regular"}]</field>
    </object>
    <object pk="21" model="translator.translation">
        <field type="CharField" name="text_id">replace_label</field>
        <field type="IntegerField" name="element_id">9</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Replace [Regular Expression] [String]</field>
    </object>
    <object pk="22" model="translator.translation">
        <field type="CharField" name="text_id">replace_label</field>
        <field type="IntegerField" name="element_id">9</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Reemplazar [Expresión regular] [String]</field>
    </object>
    <object pk="23" model="translator.translation">
        <field type="CharField" name="text_id">replace_helptext</field>
        <field type="IntegerField" name="element_id">9</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value"><![CDATA[Searchs for a specific value in the value
of the channel using <a href="http://www.regular-expressions.info/" target="_blank">regular expressions</a>,
and replaces it with the string given by
the user.

e.g. Replaces the brackets with an empty
character (removes the bracket)
Channel value: '(304)4345454'
Regular expresion (given by user): '/[\(\)]/g'
Returns: '3044345454']]></field>
    </object>
    <object pk="24" model="translator.translation">
        <field type="CharField" name="text_id">replace_helptext</field>
        <field type="IntegerField" name="element_id">9</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value"><![CDATA[Búsca fragmentos de texto en el valor del canal
usando <a href="http://www.regular-expressions.info/" target="_blank">expresiones regulares</a>, y los reemplaza usando el
texto proporcionado por el usuario en el parámetro
"Reemplazar por".

Ejemplo: Eliminar parentesis
Valor del canal: '(304)4345454'
Reemplazar por: ''
Expresión regular: '/[\(\)]/g'
Valor devuelto: '3044345454']]></field>
    </object>
    <object pk="25" model="translator.translation">
        <field type="CharField" name="text_id">replace_params</field>
        <field type="IntegerField" name="element_id">9</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">[{"name": "newSubStr", "type": "S", "index": 1, "label": "Replace with"},{"name": "regexp", "type": "regexp", "index": 0, "required":true, "label": "Regular Expression"}]</field>
    </object>
    <object pk="26" model="translator.translation">
        <field type="CharField" name="text_id">replace_params</field>
        <field type="IntegerField" name="element_id">9</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">[{"name": "newSubStr", "type": "S", "index": 1, "label": "Reemplazar por"},{"name": "regexp", "type": "regexp", "index": 0, "required":true, "label": "Expresión regular"}]</field>
    </object>
    <object pk="27" model="translator.translation">
        <field type="CharField" name="text_id">split_label</field>
        <field type="IntegerField" name="element_id">12</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Split [Separator, Limit]</field>
    </object>
    <object pk="28" model="translator.translation">
        <field type="CharField" name="text_id">split_label</field>
        <field type="IntegerField" name="element_id">12</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Separar [Separador, Limite]</field>
    </object>
    <object pk="29" model="translator.translation">
        <field type="CharField" name="text_id">split_helptext</field>
        <field type="IntegerField" name="element_id">12</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Separates the value of the channel into substrings
using the given separator, and creates an array
containing the resulting substrings. The delimiter
value is not returned as part of the array of
substrings. If "Limit" is given, it specifies
how many times split should occur. Must be a numeric value.

e.g.
Channel value: 'Internet'
Delimiter (given by user): 'e'
Returns: ["Int", "rn", "t"]</field>
    </object>
    <object pk="30" model="translator.translation">
        <field type="CharField" name="text_id">split_helptext</field>
        <field type="IntegerField" name="element_id">12</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Divide el valor del canal en fragmentos de texto usando el
texto indicado en el parámetro "Separador". Estos
fragmentos se devuelve en una lista de la que se elimina el
texto usado como separador.

En caso de usar el parámetro "Limite", este especifica cual
es el número máximo de veces que se separará el valor del
canal. Tiene que ser un valor numérico.

ejemplo
Valor del canal: 'Internet'
Separador: 'e'
Valor devuelto: ["Int", "rn", "t"]</field>
    </object>
    <object pk="31" model="translator.translation">
        <field type="CharField" name="text_id">split_params</field>
        <field type="IntegerField" name="element_id">12</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">[{"name": "separator", "type": "S", "index": 0, "required": true, "label": "Separator"},{"name": "howmany", "type": "N", "index": 1, "label": "Limit"}]</field>
    </object>
    <object pk="32" model="translator.translation">
        <field type="CharField" name="text_id">split_params</field>
        <field type="IntegerField" name="element_id">12</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">[{"name": "separator", "type": "S", "index": 0, "required": true, "label": "Separador"},{"name": "howmany", "type": "N", "index": 1, "label": "Limite"}]</field>
    </object>
    <object pk="33" model="translator.translation">
        <field type="CharField" name="text_id">substr_label</field>
        <field type="IntegerField" name="element_id">13</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Substr [Start] [Length]</field>
    </object>
    <object pk="34" model="translator.translation">
        <field type="CharField" name="text_id">substr_label</field>
        <field type="IntegerField" name="element_id">13</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Substr [Inicio] [Tamaño]</field>
    </object>
    <object pk="35" model="translator.translation">
        <field type="CharField" name="text_id">substr_helptext</field>
        <field type="IntegerField" name="element_id">13</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Extracts a specified number of characters
from a string beginning at the specified
start index.

e.g.
Channel value: 'EzWeb'
Start (given by user): '2'
Length (given by user): '3'
Returns: 'Web'</field>
    </object>
    <object pk="36" model="translator.translation">
        <field type="CharField" name="text_id">substr_helptext</field>
        <field type="IntegerField" name="element_id">13</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">
Devuelve el fragmento de texto resultante de cortar el
valor del canal empezando en el carácter indicado por el
parámetro "Inicio" y con un tamaño máximo indicado por el
parámetro "Tamaño".

ejemplo
Valor del canal: 'EzWeb'
Inicio: '2'
Tamaño: '3'
Valor devuelto: 'Web'</field>
    </object>
    <object pk="37" model="translator.translation">
        <field type="CharField" name="text_id">substr_params</field>
        <field type="IntegerField" name="element_id">13</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">[{"name": "length", "type": "N", "index": 1, "label": "Length"},{"name": "start", "type": "N", "index": 0, "required":true, "label": "Start"}]</field>
    </object>
    <object pk="38" model="translator.translation">
        <field type="CharField" name="text_id">substr_params</field>
        <field type="IntegerField" name="element_id">13</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">[{"name": "length", "type": "N", "index": 1, "label": "Tamaño"},{"name": "start", "type": "N", "index": 0, "required":true, "label": "Inicio"}]</field>
    </object>
    <object pk="39" model="translator.translation">
        <field type="CharField" name="text_id">tolowercase_label</field>
        <field type="IntegerField" name="element_id">16</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">To Lower Case</field>
    </object>
    <object pk="40" model="translator.translation">
        <field type="CharField" name="text_id">tolowercase_label</field>
        <field type="IntegerField" name="element_id">16</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Minúsculas</field>
    </object>
    <object pk="41" model="translator.translation">
        <field type="CharField" name="text_id">tolowercase_helptext</field>
        <field type="IntegerField" name="element_id">16</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Downcases all the letters of the value
of the channel.

e.g.
Channel value: 'EZWEB'
Returns: 'ezweb'</field>
    </object>
    <object pk="42" model="translator.translation">
        <field type="CharField" name="text_id">tolowercase_helptext</field>
        <field type="IntegerField" name="element_id">16</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Pasa a minúsculas el valor actual del canal.

ejemplo
Valor del canal: 'EZWEB'
Valor devuelto: 'ezweb'</field>
    </object>
    <object pk="43" model="translator.translation">
        <field type="CharField" name="text_id">touppercase_label</field>
        <field type="IntegerField" name="element_id">17</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">To Upper Case</field>
    </object>
    <object pk="44" model="translator.translation">
        <field type="CharField" name="text_id">touppercase_label</field>
        <field type="IntegerField" name="element_id">17</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Mayúsculas</field>
    </object>
    <object pk="45" model="translator.translation">
        <field type="CharField" name="text_id">touppercase_helptext</field>
        <field type="IntegerField" name="element_id">17</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Capitalizes all the letters of the value
of the channel.

e.g.
Channel value: 'ezweb'
Returns: 'EZWEB'</field>
    </object>
    <object pk="46" model="translator.translation">
        <field type="CharField" name="text_id">touppercase_helptext</field>
        <field type="IntegerField" name="element_id">17</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Pasa a mayúsculas el valor actual del canal.

ejemplo
Valor del canal: 'ezweb'
Valor devuelto: 'EZWEB'</field>
    </object>
    <object pk="47" model="translator.translation">
        <field type="CharField" name="text_id">jsonparser_label</field>
        <field type="IntegerField" name="element_id">18</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">JSON Parser</field>
    </object>
    <object pk="48" model="translator.translation">
        <field type="CharField" name="text_id">jsonparser_label</field>
        <field type="IntegerField" name="element_id">18</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Analizador JSON</field>
    </object>
    <object pk="49" model="translator.translation">
        <field type="CharField" name="text_id">jsonparser_helptext</field>
        <field type="IntegerField" name="element_id">18</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value"><![CDATA[Find elements in JSON structures.

Visit <a href="http://forge.morfeo-project.org/wiki/index.php/Filtros_de_Canales" target="_blank">this page</a> for further information.
]]></field>
    </object>
    <object pk="50" model="translator.translation">
        <field type="CharField" name="text_id">jsonparser_helptext</field>
        <field type="IntegerField" name="element_id">18</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value"><![CDATA[Búsca elementos en una estructura JSON.

Visita <a href="http://forge.morfeo-project.org/wiki/index.php/Filtros_de_Canales" target="_blank">esta página</a> para mayor información.]]></field>
    </object>
    <object pk="51" model="translator.translation">
        <field type="CharField" name="text_id">jsonparser_params</field>
        <field type="IntegerField" name="element_id">18</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">[{"name": "jpExp", "type": "jpath", "index": 0, "required":true, "label": "Expression"}]</field>
    </object>
    <object pk="52" model="translator.translation">
        <field type="CharField" name="text_id">jsonparser_params</field>
        <field type="IntegerField" name="element_id">18</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">[{"name": "jpExp", "type": "jpath", "index": 0, "required":true, "label": "Expresión"}]</field>
    </object>
    <object pk="53" model="translator.translation">
        <field type="CharField" name="text_id">barrier_label</field>
        <field type="IntegerField" name="element_id">19</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Barrier</field>
    </object>
    <object pk="54" model="translator.translation">
        <field type="CharField" name="text_id">barrier_label</field>
        <field type="IntegerField" name="element_id">19</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Barrera</field>
    </object>
    <object pk="55" model="translator.translation">
        <field type="CharField" name="text_id">barrier_helptext</field>
        <field type="IntegerField" name="element_id">19</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Propagates only when all the inputs have been modified.
If all the inputs are available, this filter generates a JSON structure containing the name and the value of each input.
That is, "{'name1':'value1', 'name2':'value2'}".
Optionally, you can change the indexes of the structure by giving a string like this as a parameter:
{'name1': 'new_index1','name2': 'new_index2'}</field>
    </object>
    <object pk="56" model="translator.translation">
        <field type="CharField" name="text_id">barrier_helptext</field>
        <field type="IntegerField" name="element_id">19</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Espera hasta que todas las entradas hayan propagado un
valor. En el caso de que se haya propagado un valor por
cada una de las entradas, este filtro genera una
estructura JSON en la que la clave es el nombre de la
entrada y el valor es el último valor propagado. Después
de esta propagación, se reinicia el estado y se vuelve a
esperar a que todos las entradas vuelvan a propagar un
evento.

Se puede usar el parámetro "Mapeado de claves" para cambiar
la clave que se utilizará para una determinada entrada. Un
ejemplo del contenido de este parámetro es el siguiente:
{"name1": "key1", "name2": "key2"}</field>
    </object>
    <object pk="57" model="translator.translation">
        <field type="CharField" name="text_id">barrier_params</field>
        <field type="IntegerField" name="element_id">19</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">[{"name": "mapping", "type": "S", "index": 0, "label": "Key Mapping"}]</field>
    </object>
    <object pk="58" model="translator.translation">
        <field type="CharField" name="text_id">barrier_params</field>
        <field type="IntegerField" name="element_id">19</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">[{"name": "mapping", "type": "S", "index": 0, "label": "Mappeado de claves"}]</field>
    </object>
    <object pk="59" model="translator.translation">
        <field type="CharField" name="text_id">contains_label</field>
        <field type="IntegerField" name="element_id">20</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Contains [String]</field>
    </object>
    <object pk="60" model="translator.translation">
        <field type="CharField" name="text_id">contains_label</field>
        <field type="IntegerField" name="element_id">20</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Contiene [String]</field>
    </object>
    <object pk="61" model="translator.translation">
        <field type="CharField" name="text_id">contains_helptext</field>
        <field type="IntegerField" name="element_id">20</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value"><![CDATA[Searchs for a specified value in the value
of the channel using both a string
or <a href="http://www.regular-expressions.info/" target="_blank"> regular expressions</a>.
If there is any occurrence, it returns the
whole value of the channel, else,
the value is NOT propagated.

e.g. Looks up the string 'EzWeb'
Channel value: 'Welcome to EzWeb platform'
String (given by user): 'EzWeb'
Returns: 'Welcome to EzWeb platform']]></field>
    </object>
    <object pk="62" model="translator.translation">
        <field type="CharField" name="text_id">contains_helptext</field>
        <field type="IntegerField" name="element_id">20</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value"><![CDATA[
Comprueba que el valor del canal cumpla una <a href="http://www.regular-expressions.info/" target="_blank">expresión
regular</a>, en cuyo caso el valor del canal se propagará,
en cualquier otro caso, está propagación no tendrá lugar.

Ejemplo: Comprobar que el valor contenga 'EzWeb'
Valor del canal: 'Welcome to EzWeb platform'
Patrón: 'EzWeb'
Valor propagado: 'Welcome to EzWeb platform']]></field>
    </object>
    <object pk="63" model="translator.translation">
        <field type="CharField" name="text_id">contains_params</field>
        <field type="IntegerField" name="element_id">20</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">[{"name": "pattern", "type": "S", "index": 0, "required":true, "label": "Pattern"}]</field>
    </object>
    <object pk="64" model="translator.translation">
        <field type="CharField" name="text_id">contains_params</field>
        <field type="IntegerField" name="element_id">20</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">[{"name": "pattern", "type": "S", "index": 0, "required":true, "label": "Patrón"}]</field>
    </object>
    <object pk="65" model="translator.translation">
        <field type="CharField" name="text_id">accumulator_label</field>
        <field type="IntegerField" name="element_id">21</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Accumulator</field>
    </object>
    <object pk="66" model="translator.translation">
        <field type="CharField" name="text_id">accumulator_label</field>
        <field type="IntegerField" name="element_id">21</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Acumulador</field>
    </object>
    <object pk="67" model="translator.translation">
        <field type="CharField" name="text_id">accumulator_helptext</field>
        <field type="IntegerField" name="element_id">21</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">Propagates only when all the inputs have any value but it doesn't wait for new values.
If all the inputs are available, this filter generates a JSON structure containing the name and the value of each input.
That is, "{'name1':'value1', 'name2':'value2'}".
Optionally, you can change the indexes of the structure by giving a string like this as a parameter:
{'name1': 'new_index1','name2': 'new_index2'}</field>
    </object>
    <object pk="68" model="translator.translation">
        <field type="CharField" name="text_id">accumulator_helptext</field>
        <field type="IntegerField" name="element_id">21</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">Espera hasta que todas las entradas hayan propagado un
valor. En el caso de que se haya propagado un valor por
cada una de las entradas, este filtro genera una
estructura JSON en la que la clave es el nombre de la
entrada y el valor es el último valor propagado. Después
de esta propagación, cada evento que llegue al canal
volverá a generar esta estructura JSON.

Se puede usar el parámetro "Mapeado de claves" para cambiar
la clave que se utilizará para una determinada entrada. Un
ejemplo del contenido de este parámetro es el siguiente:
{"name1": "key1", "name2": "key2"}</field>
    </object>
    <object pk="69" model="translator.translation">
        <field type="CharField" name="text_id">accumulator_params</field>
        <field type="IntegerField" name="element_id">21</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">en</field>
        <field type="BooleanField" name="default">True</field>
        <field type="TextField" name="value">[{"name": "mapping", "type": "S", "index": 0, "label": "Key Mapping"}]</field>
    </object>
    <object pk="70" model="translator.translation">
        <field type="CharField" name="text_id">accumulator_params</field>
        <field type="IntegerField" name="element_id">21</field>
        <field type="CharField" name="table">connectable.models.Filter</field>
        <field type="CharField" name="language">es</field>
        <field type="BooleanField" name="default">False</field>
        <field type="TextField" name="value">[{"name": "mapping", "type": "S", "index": 0, "label": "Mappeado de claves"}]</field>
    </object>
</django-objects>
